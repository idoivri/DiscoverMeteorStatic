- total_done= 0
- total_todo= 0

- content_for(:title, @strings.book_title)

%input{:type => 'hidden', :value => @togo.to_s}

%section.intro
  .note
    - markdown = Redcarpet::Markdown.new(Redcarpet::Render::HTML, :fenced_code_blocks => true)
    = markdown.render(@strings.intro)

%section.chapters
  %h2= @strings.toc
  %ul
    - blog.articles.select{|chapter| !chapter.data.has_key?('appendix')}.reverse.each_with_index do |post, index|
      - unless post.data.published == false || post.data.extra == true
        - if !@strings.is_complete && post.data.paragraphs
          - chapter_code = post.data.number.to_s()
          - paragraphs_to_go = @togo.select{|key, value| key == chapter_code }[chapter_code].to_i()
          - paragraphs_done = post.data.paragraphs - paragraphs_to_go
          - percentage = paragraphs_done*100/post.data.paragraphs
          - total_done += paragraphs_done
          - total_todo += post.data.paragraphs
          - # puts '-----------------------------------'
          - # puts @togo.select{|key, value| key == chapter_code }
        %li
          %a.chapter-title{:href => "#{post.url}"}=post.title
          - if !@strings.is_complete
            %span.chapter-percentage (#{percentage}%)
          %span.chapter-number=post.data.number
%section.side-column
  .progress
    - if !@strings.is_complete
      - percentage_done = total_done * 100 / total_todo
      %p{'data-value' => percentage_done}= @strings.percentage_translated
      %progress#progress{:value => total_done, :max => total_todo}
    .commit-date
      %span.label= @strings.last_activity
      %span.date
  .contribute
    %h3=@strings.contribute
    %a{:href => @strings.repo}= @strings.on_github
  .links
    %h3= @strings.download
    %a{:href => '/pdf'}= @strings.print_pdf
  .translators
    %h3=@strings.translated_by
    %ul.contributors
  - changelog = blog.articles[0].data
  - if changelog.has_key?('version') && changelog.has_key?('updated')
    .version
      %h3=@strings.version
      %p
        #{@strings.version} #{changelog['version']}, #{changelog['updated']}
        (<a href="/changelog">#{changelog['title']}</a>)

:javascript
  $(function(){
   // GitHub
    var gitHubToken = "#{@github_token}";
    var lang = "#{@strings.lang}";

    $.get('https://api.github.com/repos/DiscoverMeteor/DiscoverMeteor_'+lang+'/contributors', function (data) {
      data.sort(function(obj1, obj2) {
        return obj2.contributions - obj1.contributions;
      });
      $.each(data, function (index, contributor) {
        if(contributor.login != 'SachaG' && contributor.login != 'tmeasday' && contributor.login != 'rgoomar')
          $('.contributors').append('<li><img src="'+contributor.avatar_url+'"/><a href="'+contributor.html_url+'">'+contributor.login+'</a> <span>('+contributor.contributions+')</span></li>')
      });
    });

    $.getJSON('https://api.github.com/repos/DiscoverMeteor/DiscoverMeteor_'+lang+'/commits', function (data) {
      var date = moment(data[0].commit.author.date).fromNow();
      $('.commit-date .date').text(date);
    });
  });
